{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2023-08-13T19:52:19.485Z",
    "end": "2023-08-13T19:52:23.717Z",
    "duration": 4232,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e95dd0ab-8d35-4997-a02d-949ed2b04887",
      "title": "",
      "fullFile": "cypress/e2e/regression/text-input.spec.cy.js",
      "file": "cypress/e2e/regression/text-input.spec.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1276a883-2475-461c-b37c-17e3cbf5f1a7",
          "title": "Text Input Page (browser electron, viewport 1000x660)",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "verifies the header",
              "fullTitle": "Text Input Page (browser electron, viewport 1000x660) verifies the header",
              "timedOut": null,
              "duration": 420,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_textInputSteps.textInputSteps.titleTextIs('Text Input');",
              "err": {},
              "uuid": "2808702e-2a90-4dcc-922d-5a746c663ede",
              "parentUUID": "1276a883-2475-461c-b37c-17e3cbf5f1a7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "changes the button's name after filling in 'My button' field and clicking on the button",
              "fullTitle": "Text Input Page (browser electron, viewport 1000x660) changes the button's name after filling in 'My button' field and clicking on the button",
              "timedOut": null,
              "duration": 968,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newName = 'New Button\\'s Name';\n_textInputSteps.textInputSteps.fillInInputField(newName);\n_textInputSteps.textInputSteps.updatingBtnTextIs('Button That Should Change it\\'s Name Based on Input Value');\n_textInputSteps.textInputSteps.clickUpdatingBtn();\n_textInputSteps.textInputSteps.updatingBtnTextIs(newName);",
              "err": {},
              "uuid": "7cc5976b-6e21-4364-98c1-d44a74266170",
              "parentUUID": "1276a883-2475-461c-b37c-17e3cbf5f1a7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "reloads page at its initial state after button name changes",
              "fullTitle": "Text Input Page (browser electron, viewport 1000x660) reloads page at its initial state after button name changes",
              "timedOut": null,
              "duration": 1139,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newName = 'Updated Button\\'s Name';\n_textInputSteps.textInputSteps.fillInInputField(newName);\n_textInputSteps.textInputSteps.updatingBtnTextIs('Button That Should Change it\\'s Name Based on Input Value');\n_textInputSteps.textInputSteps.clickUpdatingBtn();\n_textInputSteps.textInputSteps.updatingBtnTextIs(newName);\ncy.reload();\n_textInputSteps.textInputSteps.updatingBtnTextIs('Button That Should Change it\\'s Name Based on Input Value');",
              "err": {},
              "uuid": "4ebc78e6-75c0-48cd-9a78-c821608a6bb5",
              "parentUUID": "1276a883-2475-461c-b37c-17e3cbf5f1a7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "allows to modify the button name twice without the page reload",
              "fullTitle": "Text Input Page (browser electron, viewport 1000x660) allows to modify the button name twice without the page reload",
              "timedOut": null,
              "duration": 1573,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//todo: change the TC naming\n//todo: add a list of positive names and make a scenario outline\n//todo: add a negative TC\nconst newName1 = 'Updated Button\\'s Name';\nconst newName2 = 'Updated Again Button\\'s Name';\ncy.get('[placeholder=\"MyButton\"]').type(`${newName1}`);\ncy.get('[type=\"button\"]').should('have.text', 'Button That Should Change it\\'s Name Based on Input Value');\ncy.get('[type=\"button\"]').contains('Button That Should Change it\\'s Name Based on Input Value').click();\n//todo: place all the text vars into the vars/conts or files (?)\n//todo: read get vs contains\n//todo: whether get('[type=\"button\"]') is ok? there are no data-attr\ncy.get('[type=\"button\"]').should(\"have.text\", `${newName1}`);\ncy.get('[placeholder=\"MyButton\"]').clear().type(`${newName2}`);\ncy.get('[type=\"button\"]').should('have.text', `${newName1}`);\ncy.get('[type=\"button\"]').contains(`${newName1}`).click();\n// todo: following would be correct or a bad practice to pur action after should?\n//  cy.get('[type=\"button\"]').should('have.text', `${newName1}`).click()\n//todo: place all the text vars into the vars/conts or files (?)\n//todo: read get vs contains\n//todo: whether get('[type=\"button\"]') is ok? there are no data-attr\ncy.get('[type=\"button\"]').should(\"have.text\", `${newName2}`);",
              "err": {},
              "uuid": "1b4f3add-5f7f-4f24-8d2d-94d556a05ea2",
              "parentUUID": "1276a883-2475-461c-b37c-17e3cbf5f1a7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2808702e-2a90-4dcc-922d-5a746c663ede",
            "7cc5976b-6e21-4364-98c1-d44a74266170",
            "4ebc78e6-75c0-48cd-9a78-c821608a6bb5",
            "1b4f3add-5f7f-4f24-8d2d-94d556a05ea2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4100,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "[datetime]_[status]_[name]-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/e2e",
        "reportFilename": "[datetime]_[status]_[name]-report",
        "timestamp": "default",
        "showPassed": true
      },
      "version": "6.2.0"
    }
  }
}